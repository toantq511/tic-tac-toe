{"version":3,"sources":["serviceWorker.js","App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","App","size","useState","Array","fill","board","setBoard","isCurrentX","setIsCurrentX","winner","setWinner","useEffect","lines","i","length","a","b","c","calculateWinner","className","style","gridTemplateColumns","map","cell","cellId","disabled","key","onClick","current","id","handleClick","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4IAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCqDSC,G,KAhDH,SAAC,GAAkB,IAAD,IAAfC,YAAe,MAAR,EAAQ,IACHC,mBAAS,IAAIC,MAAMF,EAAOA,GAAMG,KAAK,OADlC,mBACtBC,EADsB,KACfC,EADe,OAEOJ,oBAAS,GAFhB,mBAEtBK,EAFsB,KAEVC,EAFU,OAGDN,mBAAS,MAHR,mBAGtBO,EAHsB,KAGdC,EAHc,KAQ7BC,qBAAU,WACTD,EA7BsB,SAACL,GAWxB,IAVA,IAAMO,EAAQ,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAECC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACpBD,EAAMC,GADc,GAC/BE,EAD+B,KAC5BC,EAD4B,KACzBC,EADyB,KAEtC,GAAIZ,EAAMU,IAAMV,EAAMU,KAAOV,EAAMW,IAAMX,EAAMU,KAAOV,EAAMY,GAC3D,OAAOZ,EAAMU,GAGf,OAAO,KAYIG,CAAgBb,MACxB,CAACA,IASJ,OACC,yBAAKc,UAAU,eACd,wBAAIA,UAAU,kBACZV,EACE,WAAaA,EACb,iBAAmBF,EAAa,IAAM,MAE1C,yBACCY,UAAU,gBACVC,MAAO,CAAEC,oBAAoB,UAAD,OAAYpB,EAAZ,YAE3BI,EAAMiB,KAAI,SAACC,EAAMC,GAAP,OACV,4BACCL,UAAU,eACVM,WAAUhB,EACViB,IAAKF,EACLG,QAAS,kBAvBM,SAACH,GACpB,IAAKnB,EAAMmB,GAAS,CACnB,IAAMI,EAAUrB,EAAa,IAAM,IACnCD,GAAS,kBAAMD,EAAMiB,KAAI,SAACC,EAAMM,GAAP,OAAeL,IAAWK,EAAKD,EAAUL,QAClEf,GAAeD,IAmBGuB,CAAYN,KAE1BD,OAIJ,4BAAQI,QArCI,WACbrB,EAAS,IAAIH,MAAMF,EAAOA,GAAMG,KAAK,OACrCM,EAAU,OAmCeS,UAAU,aAAlC,cC3DHY,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SF0HnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.600b48a4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst calculateWinner = (board) => {\r\n\tconst lines = [\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t\t[0, 3, 6],\r\n\t\t[1, 4, 7],\r\n\t\t[2, 5, 8],\r\n\t\t[0, 4, 8],\r\n\t\t[2, 4, 6],\r\n\t];\r\n\tfor (let i = 0; i < lines.length; i++) {\r\n\t\tconst [a, b, c] = lines[i];\r\n\t\tif (board[a] && board[a] === board[b] && board[a] === board[c]) {\r\n\t\t\treturn board[a];\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nconst App = ({ size = 3 }) => {\r\n\tconst [board, setBoard] = useState(new Array(size * size).fill(null));\r\n\tconst [isCurrentX, setIsCurrentX] = useState(false);\r\n\tconst [winner, setWinner] = useState(null);\r\n\tconst reset = () => {\r\n\t\tsetBoard(new Array(size * size).fill(null));\r\n\t\tsetWinner(null);\r\n\t};\r\n\tuseEffect(() => {\r\n\t\tsetWinner(calculateWinner(board));\r\n\t}, [board]);\r\n\r\n\tconst handleClick = (cellId) => {\r\n\t\tif (!board[cellId]) {\r\n\t\t\tconst current = isCurrentX ? \"X\" : \"O\";\r\n\t\t\tsetBoard(() => board.map((cell, id) => (cellId === id ? current : cell)));\r\n\t\t\tsetIsCurrentX(!isCurrentX);\r\n\t\t}\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"app-wrapper\">\r\n\t\t\t<h2 className=\"status-wrapper\">\r\n\t\t\t\t{winner\r\n\t\t\t\t\t? \"Winner: \" + winner\r\n\t\t\t\t\t: \"Next Player: \" + (isCurrentX ? \"X\" : \"O\")}\r\n\t\t\t</h2>\r\n\t\t\t<div\r\n\t\t\t\tclassName=\"board-wrapper\"\r\n\t\t\t\tstyle={{ gridTemplateColumns: `repeat(${size}, 1fr)` }}\r\n\t\t\t>\r\n\t\t\t\t{board.map((cell, cellId) => (\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"cell-wrapper\"\r\n\t\t\t\t\t\tdisabled={winner ? true : false}\r\n\t\t\t\t\t\tkey={cellId}\r\n\t\t\t\t\t\tonClick={() => handleClick(cellId)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{cell}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t\t<button onClick={reset} className=\"btn-reset\">\r\n\t\t\t\tRestart\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}