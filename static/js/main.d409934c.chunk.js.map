{"version":3,"sources":["serviceWorker.js","components/Square/index.jsx","components/Board/index.jsx","App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Square","props","className","onClick","style","isWin","backgroundColor","undefined","value","Board","marginLeft","map","item","width","display","textAlign","key","subItem","i","squares","winner","includes","renderSquare","App","state","history","Array","fill","stepNumber","xIsNext","ascSort","this","slice","length","calculateWinner","setState","concat","Math","floor","step","status","current","moves","move","desc","jumpTo","color","handleClick","reverse","React","Component","lines","a","b","c","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d409934c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nconst Square = (props) => (\r\n\t<button\r\n\t\tclassName=\"square-wrapper\"\r\n\t\tonClick={props.onClick}\r\n\t\tstyle={props.isWin ? { backgroundColor: \"green\" } : undefined}\r\n\t>\r\n\t\t{props.value || \"​ \"}\r\n\t</button>\r\n);\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"../Square\";\r\n\r\nconst Board = (props) => {\r\n\tconst renderSquare = (i) => (\r\n\t\t<Square\r\n\t\t\tvalue={props.squares[i]}\r\n\t\t\tonClick={() => props.onClick(i)}\r\n\t\t\tkey={i}\r\n\t\t\tisWin={props.winner?.includes(i)}\r\n\t\t/>\r\n\t);\r\n\treturn (\r\n\t\t<div className=\"board-wrapper\">\r\n\t\t\t<div className=\"col-label\" style={{ marginLeft: \"3rem\" }}>\r\n\t\t\t\t{[1, 2, 3].map((item) => (\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\twidth: \"5rem\",\r\n\t\t\t\t\t\t\tdisplay: \"inline-block\",\r\n\t\t\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tkey={item}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tColumn {item}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t\t{[0, 1, 2].map((item) => (\r\n\t\t\t\t<div className=\"board-row\" key={item}>\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tclassName=\"row-label\"\r\n\t\t\t\t\t\tstyle={{ width: \"3rem\", display: \"inline-block\" }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tRow {item + 1}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t{[0, 1, 2].map((subItem) => renderSquare(subItem + item * 3))}\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\n\r\nimport Board from \"./components/Board\";\r\nimport \"./style.css\";\r\nclass App extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thistory: [\r\n\t\t\t\t{\r\n\t\t\t\t\tsquares: Array(9).fill(null),\r\n\t\t\t\t\tlocation: [-1, -1],\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t\tstepNumber: 0,\r\n\t\t\txIsNext: true,\r\n\t\t\tascSort: true,\r\n\t\t};\r\n\t}\r\n\r\n\thandleClick(i) {\r\n\t\tconst history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n\t\tconst current = history[history.length - 1];\r\n\t\tconst squares = current.squares.slice();\r\n\t\tif (calculateWinner(squares) || squares[i]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsquares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n\t\tthis.setState({\r\n\t\t\thistory: history.concat([\r\n\t\t\t\t{\r\n\t\t\t\t\tsquares: squares,\r\n\t\t\t\t\tlocation: [i % 3, Math.floor(i / 3)],\r\n\t\t\t\t},\r\n\t\t\t]),\r\n\t\t\tstepNumber: history.length,\r\n\t\t\txIsNext: !this.state.xIsNext,\r\n\t\t});\r\n\t}\r\n\r\n\tjumpTo(step) {\r\n\t\tthis.setState({\r\n\t\t\tstepNumber: step,\r\n\t\t\txIsNext: step % 2 === 0,\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst history = this.state.history;\r\n\t\tconst current = history[this.state.stepNumber];\r\n\t\tconst winner = calculateWinner(current.squares);\r\n\t\tconst moves = history.map((step, move) => {\r\n\t\t\tconst desc = move ? \"Go to move #\" + move : \"Go to game start\";\r\n\t\t\treturn (\r\n\t\t\t\t<li key={move}>\r\n\t\t\t\t\t<button onClick={() => this.jumpTo(move)}>\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tstyle={\r\n\t\t\t\t\t\t\t\tmove === this.state.stepNumber ? { color: \"red\" } : undefined\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{desc}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t{move ? (\r\n\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t(Col: {step.location[0] + 1}, Row: {step.location[1] + 1})\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t\t{move === this.state.stepNumber && (\r\n\t\t\t\t\t\t<span style={{ color: \"red\" }}>(current)</span>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</li>\r\n\t\t\t);\r\n\t\t});\r\n\t\tlet status;\r\n\t\tif (winner) {\r\n\t\t\tstatus = \"Winner: \" + current.squares[winner[0]];\r\n\t\t} else if (moves.length === 10) status = \"Draw\";\r\n\t\telse {\r\n\t\t\tstatus = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div className=\"app-wrapper\">\r\n\t\t\t\t<h1>{status}</h1>\r\n\t\t\t\t<Board\r\n\t\t\t\t\tsquares={current.squares}\r\n\t\t\t\t\tonClick={(i) => this.handleClick(i)}\r\n\t\t\t\t\twinner={winner}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"game-info\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\t\tthis.setState((state) => ({ ascSort: !state.ascSort }))\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{this.state.ascSort ? \"Sort Descend\" : \"Sort Ascend\"}\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<ol>{this.state.ascSort ? moves : moves.reverse()}</ol>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n// ========================================\r\n\r\nfunction calculateWinner(squares) {\r\n\tconst lines = [\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t\t[0, 3, 6],\r\n\t\t[1, 4, 7],\r\n\t\t[2, 5, 8],\r\n\t\t[0, 4, 8],\r\n\t\t[2, 4, 6],\r\n\t];\r\n\tfor (let i = 0; i < lines.length; i++) {\r\n\t\tconst [a, b, c] = lines[i];\r\n\t\tif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n\t\t\treturn [a, b, c];\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}